{"remainingRequest":"D:\\Microsoft VS Code\\Microsoft file\\demo2\\node_modules\\babel-loader\\lib\\index.js!D:\\Microsoft VS Code\\Microsoft file\\demo2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Microsoft VS Code\\Microsoft file\\demo2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Microsoft VS Code\\Microsoft file\\demo2\\src\\components\\Home\\scroll2\\tree1.2.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Microsoft VS Code\\Microsoft file\\demo2\\src\\components\\Home\\scroll2\\tree1.2.vue","mtime":1550824687696},{"path":"D:\\Microsoft VS Code\\Microsoft file\\demo2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Microsoft VS Code\\Microsoft file\\demo2\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Microsoft VS Code\\Microsoft file\\demo2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Microsoft VS Code\\Microsoft file\\demo2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport tree3 from './tree1.3';\nexport default {\n  props: ['data'],\n  data: function data() {\n    return {\n      datas: this.data,\n      msg: '这是A组件',\n      depth: 0,\n      menus: [],\n      actId: ''\n    };\n  },\n  components: {\n    tree3: tree3\n  },\n  watch: {\n    data: function data(val) {\n      this.datas = val;\n    }\n  },\n  mounted: function mounted() {\n    this.getTree();\n  },\n  methods: {\n    //异步调用ajax async-await(ES7的东西)\n    getTree: function getTree() {\n      var last = this.datas;\n\n      if (last.code === 1) {\n        this.menus = last.data;\n        this.addshow(this.menus);\n      }\n    },\n    //递归函数在每一项中添加selectArr和show\n    addshow: function addshow(arr) {\n      for (var i = 0; i < arr.length; i++) {\n        this.$set(arr[i], 'show', true);\n        this.$set(arr[i], 'selectArr', []);\n\n        if (arr[i].userList && arr[i].userList.length > 0) {\n          this.addshow(arr[i].userList);\n        }\n      }\n    },\n    //点击箭头使树展开收缩\n    selectItem: function selectItem(data) {\n      if (data.userList && data.userList.length > 0) {\n        //如果此项下有userList且length大于0，则切换展开与折叠状态\n        data.show = !data.show;\n      } else {\n        //如果此项下没有userList或length等于0，则将选中的id赋值给actId\n        this.actId = data.id;\n      }\n    },\n    //进行多选勾选\n    checkItem: function checkItem(data) {\n      console.log(this.menus);\n\n      if (data.selectArr.length > 0) {\n        //如果这一项的selectArr有值，说明是被勾选状态，要把selectArr清空，清空勾选\n        data.selectArr = []; //如果此选项清空勾选后，如果下面有userList的话，那么也同时要清空\n\n        if (data.userList && data.userList.length > 0) {\n          this.clearChild(data.userList);\n        } //如果此选项清空勾选后，要把所有的父元素，也全部清空勾选，因为它不勾选了，所有父元素的状态不可能还处于勾选状态，不管它勾选不勾选，我们都要清除一遍，以防万一\n\n\n        this.clearFather(this.menus, data);\n      } else {\n        //如果这一项的selectArr为[]，说明是未被勾选状态，在selectArr里加id值，添加勾选\n        data.selectArr.push(data.id); //如果此选项清空勾选后，如果下面有userList的话，那么也同时勾选下面所有的孩子\n\n        if (data.userList && data.userList.length > 0) {\n          this.addChild(data.userList);\n        }\n\n        console.log(this.menus);\n        console.log(data); //如果此选项勾选后，要判断所有的上级元素是不是应该全部打勾\n\n        this.selectFather(this.menus, data);\n      }\n    },\n    //定义函数清空所有孩子的勾选\n    clearChild: function clearChild(arr) {\n      for (var i = 0; i < arr.length; i++) {\n        arr[i].selectArr = [];\n\n        if (arr[i].userList && arr[i].userList.length > 0) {\n          this.clearChild(arr[i].userList);\n        }\n      }\n    },\n    //定义函数添加所有孩子的勾选\n    addChild: function addChild(arr) {\n      for (var i = 0; i < arr.length; i++) {\n        arr[i].selectArr.push(arr[i].id);\n\n        if (arr[i].userList && arr[i].userList.length > 0) {\n          this.addChild(arr[i].userList);\n        }\n      }\n    },\n    //定义函数一层一层的往上寻找父元素的userList\n    clearFather: function clearFather(father, data) {\n      for (var i = 0; i < father.length; i++) {\n        if (father[i].id === data.id) {\n          //找到data所在的userList为father，然后再通过这个userList找到拥有这个userList的父元素\n          this.clearRealFather(this.menus, father);\n        } else if (father[i].userList && father[i].userList.length > 0) {\n          this.clearFather(father[i].userList, data);\n        }\n      }\n    },\n    //定义函数根据找到的上层父元素的userList来寻找父元素，并将他们清除勾选\n    clearRealFather: function clearRealFather(menus, arr) {\n      for (var i = 0; i < menus.length; i++) {\n        console.log(menus[i].userList);\n        console.log(menus);\n        console.log(arr);\n\n        if (menus[i].userList === arr) {\n          //找到这个拥有userList的父元素后，将此selectArr清空\n          menus[i].selectArr = []; //找到这个拥有userList的父元素后，再调用clearFather，再进行向上寻找父元素，知道没有父元素为止\n\n          this.clearFather(this.menus, menus[i]);\n        } else if (menus[i].userList && menus[i].userList.length > 0) {\n          this.clearRealFather(menus[i].userList, arr);\n        }\n      }\n    },\n    //定义函数一层一层的往上寻找父元素的userList\n    selectFather: function selectFather(father, data) {\n      for (var i = 0; i < father.length; i++) {\n        if (father[i].id === data.id) {\n          var arr = [];\n\n          for (var j = 0; j < father.length; j++) {\n            if (father[j].selectArr.length > 0) {\n              arr.push(father[i]);\n            }\n          } //判断此数组中是不是所有的selectArr都有值，如果有值，就执行selectRealFather，将上层父元素也勾选\n\n\n          if (arr.length === father.length) {\n            this.selectRealFather(this.menus, father);\n          }\n        } else if (father[i].userList && father[i].userList.length > 0) {\n          this.selectFather(father[i].userList, data);\n        }\n      }\n    },\n    //定义函数根据找到的上层父元素的userList来寻找父元素，并将他们清除勾选\n    selectRealFather: function selectRealFather(menus, arr) {\n      for (var i = 0; i < menus.length; i++) {\n        if (menus[i].userList === arr) {\n          //找到这个拥有userList的父元素后，给selectArr赋值，使其勾选\n          menus[i].selectArr.push(menus[i].id); //找到这个拥有userList的父元素后，再调用clearFather，再进行向上寻找父元素，知道没有父元素为止\n\n          this.clearFather(this.menus, menus[i]);\n        } else if (menus[i].userList && menus[i].userList.length > 0) {\n          this.selectRealFather(menus[i].userList, arr);\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["tree1.2.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <!-- {{data}} -->\r\n    <!-- <div>123</div> -->\r\n    <!-- {{datas}} -->\r\n    <tree3\r\n      :menus=\"menus\"\r\n      :depth=\"depth\"\r\n      :actId=\"actId\"\r\n      @selectItem=\"selectItem\"\r\n      @checkItem=\"checkItem\"\r\n    ></tree3>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport tree3 from './tree1.3'\r\nexport default {\r\n  props: ['data'],\r\n  data() {\r\n    return {\r\n      datas: this.data,\r\n      msg: '这是A组件',\r\n      depth: 0,\r\n      menus: [],\r\n      actId: ''\r\n    };\r\n  },\r\n  components: {\r\n    tree3\r\n  },\r\n  watch: {\r\n    data: function(val) {\r\n      this.datas = val;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getTree();\r\n  },\r\n  methods: {\r\n    //异步调用ajax async-await(ES7的东西)\r\n    getTree() {\r\n      var last = this.datas;\r\n      if (last.code === 1) {\r\n        this.menus = last.data;\r\n        this.addshow(this.menus);\r\n      }\r\n    },\r\n    //递归函数在每一项中添加selectArr和show\r\n    addshow(arr) {\r\n      for (let i = 0; i < arr.length; i++) {\r\n        this.$set(arr[i], 'show', true);\r\n        this.$set(arr[i], 'selectArr', []);\r\n        if (arr[i].userList && arr[i].userList.length > 0) {\r\n          this.addshow(arr[i].userList);\r\n        }\r\n      }\r\n    },\r\n    //点击箭头使树展开收缩\r\n    selectItem(data) {\r\n      if (data.userList && data.userList.length > 0) {\r\n        //如果此项下有userList且length大于0，则切换展开与折叠状态\r\n        data.show = !data.show;\r\n      } else {\r\n        //如果此项下没有userList或length等于0，则将选中的id赋值给actId\r\n        this.actId = data.id;\r\n      }\r\n    },\r\n    //进行多选勾选\r\n    checkItem(data) {\r\n      console.log(this.menus)\r\n        if (data.selectArr.length > 0) {\r\n          //如果这一项的selectArr有值，说明是被勾选状态，要把selectArr清空，清空勾选\r\n          data.selectArr = [];\r\n          //如果此选项清空勾选后，如果下面有userList的话，那么也同时要清空\r\n          if (data.userList && data.userList.length > 0) {\r\n            this.clearChild(data.userList);\r\n          }\r\n          //如果此选项清空勾选后，要把所有的父元素，也全部清空勾选，因为它不勾选了，所有父元素的状态不可能还处于勾选状态，不管它勾选不勾选，我们都要清除一遍，以防万一\r\n          this.clearFather(this.menus, data);\r\n        } else {\r\n          //如果这一项的selectArr为[]，说明是未被勾选状态，在selectArr里加id值，添加勾选\r\n          data.selectArr.push(data.id);\r\n          //如果此选项清空勾选后，如果下面有userList的话，那么也同时勾选下面所有的孩子\r\n          if (data.userList && data.userList.length > 0) {\r\n            this.addChild(data.userList);\r\n          }\r\n          console.log(this.menus)\r\n          console.log(data)\r\n          //如果此选项勾选后，要判断所有的上级元素是不是应该全部打勾\r\n          this.selectFather(this.menus, data);\r\n      }\r\n    },\r\n    //定义函数清空所有孩子的勾选\r\n    clearChild(arr) {\r\n      for (var i = 0; i < arr.length; i++) {\r\n        arr[i].selectArr = [];\r\n        if (arr[i].userList && arr[i].userList.length > 0) {\r\n          this.clearChild(arr[i].userList);\r\n        }\r\n      }\r\n    },\r\n    //定义函数添加所有孩子的勾选\r\n    addChild(arr) {\r\n      for (var i = 0; i < arr.length; i++) {\r\n        arr[i].selectArr.push(arr[i].id);\r\n        if (arr[i].userList && arr[i].userList.length > 0) {\r\n          this.addChild(arr[i].userList);\r\n        }\r\n      }\r\n    },\r\n    //定义函数一层一层的往上寻找父元素的userList\r\n    clearFather(father, data) {\r\n      for (var i = 0; i < father.length; i++) {\r\n        if (father[i].id === data.id) {\r\n          //找到data所在的userList为father，然后再通过这个userList找到拥有这个userList的父元素\r\n          this.clearRealFather(this.menus, father);\r\n        } else if (father[i].userList && father[i].userList.length > 0) {\r\n          this.clearFather(father[i].userList, data);\r\n        }\r\n      }\r\n    },\r\n    //定义函数根据找到的上层父元素的userList来寻找父元素，并将他们清除勾选\r\n    clearRealFather(menus, arr) {\r\n      for (var i = 0; i < menus.length; i++) {\r\n        console.log(menus[i].userList)\r\n        console.log(menus)\r\n        console.log(arr)\r\n        if (menus[i].userList === arr) {\r\n          //找到这个拥有userList的父元素后，将此selectArr清空\r\n          menus[i].selectArr = [];\r\n          //找到这个拥有userList的父元素后，再调用clearFather，再进行向上寻找父元素，知道没有父元素为止\r\n          this.clearFather(this.menus, menus[i]);\r\n        } else if (menus[i].userList && menus[i].userList.length > 0) {\r\n          this.clearRealFather(menus[i].userList, arr);\r\n        }\r\n      }\r\n    },\r\n    //定义函数一层一层的往上寻找父元素的userList\r\n    selectFather(father, data) {\r\n      for (var i = 0; i < father.length; i++) {\r\n        if (father[i].id === data.id) {\r\n          var arr = [];\r\n          for (var j = 0; j < father.length; j++) {\r\n            if (father[j].selectArr.length > 0) {\r\n              arr.push(father[i]);\r\n            }\r\n          }\r\n          //判断此数组中是不是所有的selectArr都有值，如果有值，就执行selectRealFather，将上层父元素也勾选\r\n          if (arr.length === father.length) {\r\n            this.selectRealFather(this.menus, father);\r\n          }\r\n        } else if (father[i].userList && father[i].userList.length > 0) {\r\n          this.selectFather(father[i].userList, data);\r\n        }\r\n      }\r\n    },\r\n    //定义函数根据找到的上层父元素的userList来寻找父元素，并将他们清除勾选\r\n    selectRealFather(menus, arr) {\r\n      for (var i = 0; i < menus.length; i++) {\r\n        if (menus[i].userList === arr) {\r\n          //找到这个拥有userList的父元素后，给selectArr赋值，使其勾选\r\n          menus[i].selectArr.push(menus[i].id);\r\n          //找到这个拥有userList的父元素后，再调用clearFather，再进行向上寻找父元素，知道没有父元素为止\r\n          this.clearFather(this.menus, menus[i]);\r\n        } else if (menus[i].userList && menus[i].userList.length > 0) {\r\n          this.selectRealFather(menus[i].userList, arr);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.treeMoudel {\r\n  li {\r\n    .itemTree {\r\n      width: 100%;\r\n      padding-left: 30px;\r\n      position: relative;\r\n      &:hover {\r\n        background: #2b9eee;\r\n        color: #fff;\r\n      }\r\n      .selectBox {\r\n        display: inline-block;\r\n        width: 16px;\r\n        height: 16px;\r\n        border: 1px solid #ccc;\r\n        border-radius: 3px;\r\n        position: relative;\r\n        background: #fff;\r\n        top: 2px;\r\n        .checkName {\r\n          position: absolute;\r\n          top: -16px;\r\n          left: 0px;\r\n          color: #333;\r\n        }\r\n        .checkUsername {\r\n          position: absolute;\r\n          top: -12px;\r\n          left: 0px;\r\n          color: #333;\r\n        }\r\n      }\r\n      span {\r\n        display: inline-block;\r\n        position: absolute;\r\n        font-size: 14px;\r\n      }\r\n      .topSpan {\r\n        font-size: 16px;\r\n      }\r\n      .noTopSpan {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n    .topNode {\r\n      height: 55px;\r\n      line-height: 55px;\r\n      font-size: 16px;\r\n      cursor: pointer;\r\n    }\r\n    .active {\r\n      background: #2b9eee;\r\n      color: #fff;\r\n    }\r\n    .noTopNode {\r\n      height: 45px;\r\n      line-height: 45px;\r\n      &:hover {\r\n        background: #2b9eee;\r\n        cursor: pointer;\r\n        color: #fff;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"src\\components\\Home\\scroll2"}]}